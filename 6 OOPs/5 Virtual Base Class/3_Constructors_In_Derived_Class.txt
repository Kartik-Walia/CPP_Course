CONSTRUCTORS IN DERIVED CLASS 
- We can use constructors in derived class 
- If base class constructor does not have any arguments, there is no need of any constructor in derived class
- But if there are 1 or more arguments in the base class constructor, derived class need to pass arguments to 
    the base class constructor 
- If both base and derived classes have constructors, base class constructor is executed first.


CONSTRUCTORS IN MULTIPLE INHERITANCE 
In Multiple Inheritance, base classes are constructed in order in which they appear in class declaration.
The constructor of that base class is invoked firstly which is declared first.


CONSTRUCTORS IN MULTILEVEL INHERITANCE
In Multilevel Inheritance, the constructors are executed in order of inheritance.


SPECIAL SYNTAX 
- C++ supports an special syntax for passing arguments to multiple base classes 
- The constructor of derived class receives all the arguments at once and then will pass the calls to the 
    respective base classes 
- The body is called after all the constructors are finished executing.

Derived_Constructor (arg1, arg2, arg3, ...) : Base1_Constructor(arg1, arg2), Base2_Constructor(arg3, arg4) {
    Constructor Body 
};


SPECIAL CASE OF VIRTUAL BASE CLASS 
- The constructors of virtual base classes are invoked before an non-virtual base class 
- If there are multiple virtual base classes, they're invoked in the order declared (as per previous rules)
- Any non-virtual base classes are then constructed before the derived class constructor is executed, this 
    simple means firstly constructor of all virtual base classes are invoked, then comes turn of non-virtual
    base classes